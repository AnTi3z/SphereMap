from telethon import events, functions
from db_models import *
import networkx as nx
import logging
import time
import random

logger = logging.getLogger('SphereMap_walker')
logger.setLevel(logging.DEBUG)

nx_map = nx.Graph()
cur_room = None
dst_room = None
AUTO_WALK = True
DO_TRAINING = True  # –æ—á–∫–æ –¢—Ä–µ–Ω–µ—Ä–∞


def load_graph(graph):
    filtered_types = (4, 7)
    for passage in (PassagesView
                    .select(PassagesView.start_x, PassagesView.start_y, PassagesView.end_x, PassagesView.end_y)
                    .where(PassagesView.start_type.not_in(filtered_types))
                    .where(PassagesView.end_type.not_in(filtered_types))):
        graph.add_edge((passage.start_x, passage.start_y), (passage.end_x, passage.end_y))
    database.close()


def generate_dst():
    global dst_room

    logger.debug("Generating new dst point!")
    if not cur_room:
        logger.warning("Can't generate path from None room")
        return False

    while True:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        dst_room = random.choice(list(nx_map.nodes))
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
            nx.shortest_path(nx_map, cur_room, dst_room)
            break
        except nx.NetworkXNoPath:
            # –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –µ—â–µ
            continue

    return True


@events.register(events.MessageEdited(chats=(944268265,), pattern=r"(?s)^–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ üè°(.+?) (\d+)\s+(.+)"))
@events.register(events.NewMessage(chats=(944268265,), pattern=r"(?s)^–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ üè°(.+?) (\d+)\s+(.+)"))
async def town_handler(event):
    global cur_room
    global dst_room

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–ø–∏—Å–æ–∫
    btn_data = list()
    for row in event.message.buttons:
        for btn in row:
            btn_data.append(btn.data.decode('utf-8'))

    # –ï—Å–ª–∏ –Ω–∞—Ä–≤–∞–ª–∏—Å—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—Ü–∞, —Ç–µ–ª–µ–ø–æ—Ä—Ç –∏ —Ç.–ø. –∂–º–µ–º "–£–π—Ç–∏"
    if 'cwa_training' in btn_data and DO_TRAINING:
        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –∏ –º—ã —É —Ç—Ä–µ–Ω–µ—Ä–∞ - –∂–º—ë–º –µ—ë
        time.sleep(random.uniform(1.1, 2.5))
        await event.client(functions.messages.GetBotCallbackAnswerRequest(event.from_id, event.id,
                                                                          data='cwa_training'.encode("utf-8")))
    elif 'cwa_nothing' in btn_data:
        time.sleep(random.uniform(1.1, 2.5))
        await event.client(functions.messages.GetBotCallbackAnswerRequest(event.from_id, event.id,
                                                                          data='cwa_nothing'.encode("utf-8")))
        return

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
    x = Streets.get_or_none(Streets.name == event.pattern_match.group(1)).x
    database.close()
    y = int(event.pattern_match.group(2))
    cur_room = (x, y)

    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ-–≥—É–ª—è–Ω–∏–µ
    if AUTO_WALK:
        # –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –º—ã —É–∂–µ –≤ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ
        if (dst_room is None) or (cur_room == dst_room):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
            if generate_dst():
                logger.info(f"New dst point generated!")

    # –ï—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –∏–ª–∏ —É –Ω–∞—Å –Ω–æ–≤–∞—è —Ü–µ–ª—å
    if dst_room and (cur_room != dst_room):
        try:
            # –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–æ —Ü–µ–ª–∏ –∏ –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É –≤ –º–∞—Ä—à—Ä—É—Ç–µ
            next_room = nx.shortest_path(nx_map, cur_room, dst_room)[1]
        except nx.NetworkXNoPath:
            # –î–æ —Ü–µ–ª–∏ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞
            logger.warning(f"NO PATH to dst point!")
            dst_room = None
            return

        # data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É
        next_btn_data = f"cwgoto_{next_room[0]}_{next_room[1]}"

        # –ï—Å–ª–∏ —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ - –¥–∞–≤–∏–º –µ–µ
        if next_btn_data in btn_data:
            time.sleep(random.uniform(1.3, 4.5))
            await event.client(functions.messages.GetBotCallbackAnswerRequest(event.from_id, event.id,
                                                                              data=next_btn_data.encode('utf-8')))


def activate(client):
    load_graph(nx_map)
    client.add_event_handler(town_handler)

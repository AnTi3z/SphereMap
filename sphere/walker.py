import logging
import random
import time

import networkx as nx
from telethon import events

from .db_models import *
from .sphere import BOT_ID, global_state, Task
from button_clicker import ButtonClicker

logger = logging.getLogger('Sphere.walker')
logger.setLevel(logging.INFO)

# Global vars
nx_map = nx.Graph()
dst_room = None

MODULE_CFG = {}


def load_graph(graph, w1=1.0, w2=1.0):
    filtered_types = (4, 7)
    for passage in (PassagesView
                    .select(PassagesView.start_x, PassagesView.start_y, PassagesView.start_type,
                            PassagesView.end_x, PassagesView.end_y, PassagesView.end_type)
                    .where(PassagesView.start_type.not_in(filtered_types))
                    .where(PassagesView.end_type.not_in(filtered_types))):

        start_room = (passage.start_x, passage.start_y)
        end_room = (passage.end_x, passage.end_y)

        if passage.start_type != 3 and passage.end_type != 3:
            graph.add_edge(start_room, end_room, weight=1)
        elif passage.start_type == 3 and passage.end_type == 3:
            graph.add_edge(start_room, end_room, weight=w2)
        else:
            graph.add_edge(start_room, end_room, weight=w1)
    database.close()


def generate_dst(src):
    logger.debug("Generating new dst point!")
    if not src:
        logger.warning("Can't generate path from None room")
        return None

    while True:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        dst = random.choice(list(nx_map.nodes))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        if nx.has_path(nx_map, src, dst):
            return dst


_heal_re = r"–¢–≤–æ—ë ‚ù§Ô∏è –∑–¥–æ—Ä–æ–≤—å–µ –∏ üõ° —â–∏—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å!"
_town_re = r"(?s)^–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ üè°(.+?) (\d+)\s+(.+)"


# –í–æ–∑–≤—Ä–∞—â–∞–ª–∫–∞ –≤ –≥–æ—Ä–æ–¥
@events.register(events.NewMessage(chats=(BOT_ID,), pattern=_heal_re))
async def auto_return(event):
    if MODULE_CFG['auto_return']:
        time.sleep(random.uniform(1.1, 2.5))
        await event.respond("üîÆ –°—Ñ–µ—Ä–∏—É–º")
        time.sleep(random.uniform(1.1, 2.5))
        await event.respond("üè° –ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É")


@events.register(events.MessageEdited(chats=(BOT_ID,), pattern=_town_re))
@events.register(events.NewMessage(chats=(BOT_ID,), pattern=_town_re))
async def town_handler(event):
    global dst_room
    clicker = ButtonClicker.get_clicker(BOT_ID)

    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –∏ –º—ã —É —Ç—Ä–µ–Ω–µ—Ä–∞ - –∂–º—ë–º –µ—ë
    button = clicker.find_button(event, data='cwa_training')
    if button and MODULE_CFG['training']:
        await clicker.click(button)
        return

    # –ï—Å–ª–∏ –Ω–∞—Ä–≤–∞–ª–∏—Å—å –Ω–∞ —Ç–æ—Ä–≥–æ–≤—Ü–∞, —Ç–µ–ª–µ–ø–æ—Ä—Ç –∏ —Ç.–ø. –∂–º–µ–º "–£–π—Ç–∏"
    button = clicker.find_button(event, data='cwa_nothing')
    if button:
        await clicker.click(button)
        return

    # –ï—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π - –≤–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–≥—É–ª—è–Ω–∏–µ
    if not global_state['task']:
        global_state['task'] = Task.WALKING

    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≥—É–ª—è—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –±–∞—Ä–∞–∫–∏
    if global_state['task'] != Task.WALKING:
        await clicker.click_cb_data(event, 'cwgoto_-1_-1')
        return

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –∫–æ–º–Ω–∞—Ç—ã
    x = Streets.get_or_none(Streets.name == event.pattern_match.group(1)).x
    database.close()
    y = int(event.pattern_match.group(2))
    cur_room = (x, y)

    # –ï—Å–ª–∏ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –º—ã —É–∂–µ –≤ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–µ
    if (dst_room is None) or (cur_room == dst_room):
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É
        dst_room = generate_dst(cur_room)
        if dst_room:
            logger.debug(f"New dst point generated!")

    # –ï—Å–ª–∏ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ –∏–ª–∏ —É –Ω–∞—Å –Ω–æ–≤–∞—è —Ü–µ–ª—å
    if dst_room and (cur_room != dst_room):
        try:
            # –°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–æ —Ü–µ–ª–∏ –∏ –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É –≤ –º–∞—Ä—à—Ä—É—Ç–µ
            next_room = nx.shortest_path(nx_map, cur_room, dst_room, weight='weight')[1]
        except nx.NetworkXNoPath:
            # –î–æ —Ü–µ–ª–∏ –Ω–µ—Ç –º–∞—Ä—à—Ä—É—Ç–∞
            logger.warning(f"NO PATH to dst point!")
            dst_room = None
            return

        # data –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤ —Å–ª–µ–¥—É—é—â—É—é —Ç–æ—á–∫—É
        next_btn_data = f"cwgoto_{next_room[0]}_{next_room[1]}"

        # –ï—Å–ª–∏ —Ç–∞–∫–∞—è –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ - –¥–∞–≤–∏–º –µ–µ
        await clicker.click_cb_data(event, next_btn_data)


def activate():
    load_graph(nx_map, 0.1, 0.01)
    logger.info("Sphere.Walker script activated")


def deactivate():
    logger.info("Sphere.Walker script deactivated")


HANDLERS = (town_handler, auto_return)

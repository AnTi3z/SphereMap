import logging
import asyncio
import time
import random

from telethon import events, functions

from . import tasks

ATTEMPTS = 0


logger = logging.getLogger('Sphere.stealer')
logger.setLevel(logging.DEBUG)


@events.register(events.MessageEdited(chats=(944268265,), pattern=r"(?s)^üßôüèª‚Äç‚ôÇÔ∏è.+‚ù§Ô∏è\d+.+üõ°\d+.+üëä"))
@events.register(events.NewMessage(chats=(944268265,), pattern=r"(?s)^üßôüèª‚Äç‚ôÇÔ∏è.+‚ù§Ô∏è\d+.+üõ°\d+.+üëä"))
async def ready_handler(event):
    if tasks.CURRENT_TASK == tasks.Task.STEALING:
        time.sleep(random.uniform(1.1, 2.5))
        await event.client.send_message(944268265, "üîÆ –°—Ñ–µ—Ä–∏—É–º")
        for _ in range(ATTEMPTS):
            time.sleep(random.uniform(1.1, 2.5))
            await event.client.send_message(944268265, "ü¶πüèº‚Äç‚ôÇÔ∏è –í–æ—Ä–æ–≤—Å—Ç–≤–æ")


@events.register(events.MessageEdited(
    chats=(944268265,),
    pattern=r"(?s)^(?:–ù–µ –Ω–∞–π–¥—è –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ)|(?:–ü–æ–∏—Å–∫–∞–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª—É—á–∞–π)|(?:–ü–æ–±—Ä–æ–¥–∏–≤ –≤ –æ–∫—Ä—É–≥–µ)")
)
@events.register(events.NewMessage(
    chats=(944268265,),
    pattern=r"(?s)^(?:–ù–µ –Ω–∞–π–¥—è –Ω–∏—á–µ–≥–æ –ª—É—á—à–µ)|(?:–ü–æ–∏—Å–∫–∞–≤ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ª—É—á–∞–π)|(?:–ü–æ–±—Ä–æ–¥–∏–≤ –≤ –æ–∫—Ä—É–≥–µ)")
)
async def steal_handler(event):
    if tasks.CURRENT_TASK == tasks.Task.STEALING:
        print("–í–û–†–£–ï–ú")


@events.register(events.MessageEdited(
    chats=(944268265,),
    pattern=r"(?s)^–¢–µ–±–µ –ø–æ–∫–∞ —Ä–∞–Ω–æ —Å–Ω–æ–≤–∞ –≤–æ—Ä–æ–≤–∞—Ç—å.+—á–µ—Ä–µ–∑(?: (\d{1,2}) —á.)?(?: (\d{1,2}) –º.)?(?: (\d{1,2}) —Å.)?")
)
@events.register(events.NewMessage(
    chats=(944268265,),
    pattern=r"(?s)^–¢–µ–±–µ –ø–æ–∫–∞ —Ä–∞–Ω–æ —Å–Ω–æ–≤–∞ –≤–æ—Ä–æ–≤–∞—Ç—å.+—á–µ—Ä–µ–∑(?: (\d{1,2}) —á.)?(?: (\d{1,2}) –º.)?(?: (\d{1,2}) —Å.)?")
)
async def wait_handler(event):
    time_remain = 0
    if event.pattern_match.group(1):
        time_remain += int(event.pattern_match.group(1)) * 3600
    if event.pattern_match.group(2):
        time_remain += int(event.pattern_match.group(2)) * 60
    if event.pattern_match.group(3):
        time_remain += int(event.pattern_match.group(3))

    tasks.CURRENT_TASK = tasks.Task.WALKING
    logger.info(f"–¢–∞–π–º–µ—Ä –≤–æ—Ä–æ–≤—Å—Ç–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {time_remain+15} —Å–µ–∫")
    await asyncio.sleep(time_remain+15)
    tasks.CURRENT_TASK = tasks.Task.STEALING


def activate(client, stealer_cfg):
    global ATTEMPTS
    ATTEMPTS = stealer_cfg["attempts"]
    client.add_event_handler(ready_handler)
    client.add_event_handler(wait_handler)
    logger.info("Stealer script activated")


def deactivate(client):
    client.remove_event_handler(ready_handler)
    client.remove_event_handler(wait_handler)
    logger.info("Stealer script deactivated")
